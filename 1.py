import os
import time
import cv2
import numpy as np
from pydobot import Dobot

# === Dobot & Drawing Configuration ===
port = '/dev/ttyUSB0'  # –û–±–Ω–æ–≤–∏—Ç–µ –ø–æ—Ä—Ç –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
scale = 0.5  # –ú–∞—Å—à—Ç–∞–±: –ø–∏–∫—Å–µ–ª—å -> –º–º
x_offset = 150  # –°–º–µ—â–µ–Ω–∏–µ –ø–æ X (–º–º)
y_offset = -50  # –°–º–µ—â–µ–Ω–∏–µ –ø–æ Y (–º–º)
pen_down_z = -59  # –í—ã—Å–æ—Ç–∞ —Ä—É—á–∫–∏ –ø—Ä–∏ —Ä–∏—Å–æ–≤–∞–Ω–∏–∏
pen_up_z = -55  # –í—ã—Å–æ—Ç–∞ —Ä—É—á–∫–∏ –ø—Ä–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏

def pixel_to_robot(px, py):
    x = px * scale + x_offset
    y = py * scale + y_offset
    return x, y

def get_first_image(folder):
    for file in os.listdir(folder):
        if file.lower().endswith(('.png', '.jpg', '.jpeg', '.bmp')):
            return os.path.join(folder, file)
    raise FileNotFoundError("–ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –ø–∞–ø–∫–µ.")

def process_image(image_path):
    image = cv2.imread(image_path, cv2.IMREAD_GRAYSCALE)
    image = cv2.resize(image, (200, 200))
    _, binary = cv2.threshold(image, 127, 255, cv2.THRESH_BINARY)
    return binary

def is_in_workspace(rx, ry):
    return 100 <= rx <= 250 and -100 <= ry <= 100

def draw_contours_only(device, binary_image):
    # –ò–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –∫–æ–Ω—Ç—É—Ä—ã –≤–æ–∫—Ä—É–≥ —á–µ—Ä–Ω—ã—Ö –æ–±–ª–∞—Å—Ç–µ–π
    inverted = cv2.bitwise_not(binary_image)
    
    # –ù–∞—Ö–æ–¥–∏–º –∫–æ–Ω—Ç—É—Ä—ã (–æ–±—Ä–∞–º–ª—è—é—â–∏–µ –ª–∏–Ω–∏–∏ —á–µ—Ä–Ω—ã—Ö –æ–±–ª–∞—Å—Ç–µ–π)
    contours, _ = cv2.findContours(inverted, cv2.RETR_LIST, cv2.CHAIN_APPROX_NONE)
    contours_drawn = 0
    
    print(f"–ù–∞–π–¥–µ–Ω–æ {len(contours)} –∫–æ–Ω—Ç—É—Ä–æ–≤")
    
    # –†–∏—Å—É–µ–º –∫–∞–∂–¥—ã–π –∫–æ–Ω—Ç—É—Ä
    for i, contour in enumerate(contours):
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—á–µ–Ω—å –º–∞–ª–µ–Ω—å–∫–∏–µ –∫–æ–Ω—Ç—É—Ä—ã (–≤–æ–∑–º–æ–∂–Ω–æ, —à—É–º)
        if cv2.contourArea(contour) < 3:
            continue
            
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–æ–Ω—Ç—É—Ä –≤ —Å–ø–∏—Å–æ–∫ —Ç–æ—á–µ–∫
        points = [point[0] for point in contour]
        if len(points) < 3:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–µ –∫–æ–Ω—Ç—É—Ä—ã
            continue
            
        # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—É—é —Ç–æ—á–∫—É
        first_point = points[0]
        rx, ry = pixel_to_robot(first_point[0], first_point[1])
        
        if not is_in_workspace(rx, ry):
            continue
            
        # –ü–µ—Ä–µ–º–µ—â–∞–µ–º—Å—è –∫ –Ω–∞—á–∞–ª—É —Å –ø–æ–¥–Ω—è—Ç–æ–π —Ä—É—á–∫–æ–π
        device.move_to(rx, ry, pen_up_z, 0)
        time.sleep(0.1)
        
        # –û–ø—É—Å–∫–∞–µ–º —Ä—É—á–∫—É
        device.move_to(rx, ry, pen_down_z, 0)
        time.sleep(0.05)
        
        # –†–∏—Å—É–µ–º –∫–æ–Ω—Ç—É—Ä
        for point in points[1:]:
            rx, ry = pixel_to_robot(point[0], point[1])
            if is_in_workspace(rx, ry):
                device.move_to(rx, ry, pen_down_z, 0)
                time.sleep(0.01)
        
        # –ó–∞–º—ã–∫–∞–µ–º –∫–æ–Ω—Ç—É—Ä, –≤–æ–∑–≤—Ä–∞—â–∞—è—Å—å –∫ –ø–µ—Ä–≤–æ–π —Ç–æ—á–∫–µ
        rx, ry = pixel_to_robot(first_point[0], first_point[1])
        device.move_to(rx, ry, pen_down_z, 0)
        time.sleep(0.01)
        
        # –ü–æ–¥–Ω–∏–º–∞–µ–º —Ä—É—á–∫—É
        device.move_to(rx, ry, pen_up_z, 0)
        time.sleep(0.05)
        
        contours_drawn += 1
        if i % 5 == 0:  # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥—ã–µ 5 –∫–æ–Ω—Ç—É—Ä–æ–≤
            print(f"–ù–∞—Ä–∏—Å–æ–≤–∞–Ω–æ {contours_drawn} –∫–æ–Ω—Ç—É—Ä–æ–≤ –∏–∑ {len(contours)}")
    
    return contours_drawn

# === –û—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ ===
if __name__ == '__main__':
    try:
        image_folder = 'image'
        image_path = get_first_image(image_folder)
        print(f"üì∑ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {image_path}")
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        binary_image = process_image(image_path)
        
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Dobot
        print("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Dobot...")
        device = Dobot(port=port)
        time.sleep(1)
        
        # –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –≤ —Å—Ç–∞—Ä—Ç–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é
        print("–ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –≤ —Å—Ç–∞—Ä—Ç–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é...")
        device.move_to(200, 0, pen_up_z, 0)
        time.sleep(1)
        
        # –†–∏—Å–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ –∫–æ–Ω—Ç—É—Ä—ã)
        print(" –†–∏—Å–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...")
        total_contours = draw_contours_only(device, binary_image)
        
        # –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –¥–æ–º–æ–π
        print(" –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –∏—Å—Ö–æ–¥–Ω—É—é –ø–æ–∑–∏—Ü–∏—é...")
        device.move_to(200, 0, pen_up_z, 0)
        print(f"–†–∏—Å–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –ù–∞—Ä–∏—Å–æ–≤–∞–Ω–æ {total_contours} –∫–æ–Ω—Ç—É—Ä–æ–≤")
        
    except Exception as e:
        print("–û—à–∏–±–∫–∞:", e)
        import traceback
        traceback.print_exc()
    finally:
        if 'device' in locals():
            device.close()
            print("Dobot –æ—Ç–∫–ª—é—á—ë–Ω.")